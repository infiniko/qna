// Root to Leaf Paths
class Solution {
  public:
    void preorder(Node* root, vector<int> &path, vector<vector<int>> &totalPaths){
        
        if(!root){
            return;
        }
        path.push_back(root->data);
        
        if(!root->left && !root->right){
            totalPaths.push_back(path);
        }
        
        preorder(root->left,path,totalPaths);
        preorder(root->right,path,totalPaths);
        
        path.pop_back();
        
    }
    vector<vector<int>> Paths(Node* root) {
        vector<vector<int>> totalPaths;
        vector<int> path;
        preorder(root,path,totalPaths);
        return totalPaths;
    }
};

// Root to given node

class Solution {
public:

    bool getPath(TreeNode* root, vector<int>& arr, int x) {

        if (!root) {
            return false;
        }

        arr.push_back(root->val);

        if (root->val == x) {
            return true;
        }

        if (getPath(root->left, arr, x)
            || getPath(root->right, arr, x)) {
            return true;
        }

        arr.pop_back();
        return false;
    }

    vector<int> solve(TreeNode* A, int B) {
        vector<int> arr;
        if (A == NULL) {
            return arr;
        }
        getPath(A, arr, B);
        return arr;
    }
};