// delete node in bst

class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return NULL;
        if(root->val==key){
            return helper(root);
        }
        TreeNode* dummy = root;
        while(root){
            if(key<root->val){
                if(root->left && root->left->val==key){
                    root->left = helper(root->left);
                    break;
                }
                else{
                    root=root->left;
                }
            }
            else{
                if(root->right && root->right->val==key){
                    root->right = helper(root->right);
                    break;
                }
                else{
                    root=root->right;
                }
            }
        }
        return dummy;
    }

    TreeNode* helper(TreeNode* root){
        if(root->left==NULL){
            return root->right;
        }
        else if(root->right==NULL){
            return root->left;
        }
        else{
            TreeNode* rightChild = root->right;
            TreeNode* rightMostOfLeft = findRight(root->left); 
            rightMostOfLeft->right = rightChild;
            return root->left;
        }
    }

    TreeNode* findRight(TreeNode* root){
        if(root->right==NULL) return root;
        else
        return findRight(root->right);
    }
};