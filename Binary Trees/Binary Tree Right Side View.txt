// level order

class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> sol;
        if(!root) return sol;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int n = q.size();
            int r;
            for(int i=0;i<n;i++){
                TreeNode* node = q.front();
                q.pop();
                r = node->val;

                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);

            }
            sol.push_back(r);
        }
        return sol;
    }
};


//recursion dfs..less space
class Solution {
public: 
    void traversal(TreeNode* root, int level, vector<int> &ds){
        if(!root) return;

        if(level==ds.size()){
            ds.push_back(root->val);
        }
        if(root->right) traversal(root->right,level+1,ds);
        if(root->left) traversal(root->left,level+1,ds);
    }
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ds;
        traversal(root,0,ds);
        return ds;
    }
};
