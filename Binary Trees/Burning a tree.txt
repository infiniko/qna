class Solution {
  public:
    Node* findP(Node* root, unordered_map<Node*,Node*> &parents, int target){
        
        queue<Node*> q;
        Node* tNode;
        q.push(root);
        while(!q.empty()){
            Node* temp = q.front();
            if(temp->data==target){
                tNode = temp;
            }
            q.pop();
            
            if(temp->left){
              parents[temp->left] = temp;
              q.push(temp->left);
            } 
            if(temp->right){
                parents[temp->right] = temp;
                q.push(temp->right);
            } 
            
        }
        
        return tNode;
    }
    
    
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        unordered_map<Node*,Node*> parents;
        Node* tNode = findP(root,parents,target);
        
        queue<Node*> ds;
        unordered_map<Node*,bool> visited;
        visited[tNode] = true;
        ds.push(tNode);
        int val = 0;
        
        while(!ds.empty()){
            
            val++;
            int n = ds.size();
            for(int i=0;i<n;i++){
                Node* curr = ds.front();
                ds.pop();
                
                if(curr->left && !visited[curr->left]){
                    ds.push(curr->left);
                    visited[curr->left] = true;
                }
                if(curr->right && !visited[curr->right]){
                    ds.push(curr->right);
                    visited[curr->right] = true;
                }
                if(parents[curr] && !visited[parents[curr]]){
                    ds.push(parents[curr]);
                    visited[parents[curr]] = true;
                }
            }
        }
        return val-1;
    }
};
