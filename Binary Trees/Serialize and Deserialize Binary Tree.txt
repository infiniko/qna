class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        
        if(!root) return "";
        string serStr = "";
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){

            TreeNode* temp = q.front();
            q.pop();
            if(temp==NULL) serStr.append("#,");
            else{
                serStr.append(to_string(temp->val)+',');
            }
            if(temp!=NULL){
                q.push(temp->left);
                q.push(temp->right);
            }
        } 
        return serStr;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size()==0) return NULL;
        stringstream ss(data);
        string s;
        getline(ss,s,',');
        TreeNode* root = new TreeNode(stoi(s));
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){

            TreeNode* temp = q.front();
            q.pop();

            getline(ss,s,',');
            if(s=="#"){
                temp->left = NULL;
            }
            else{
                TreeNode* l = new TreeNode(stoi(s));
                temp->left = l;
                q.push(l);
            }

            getline(ss,s,',');
            if(s=="#"){
                temp->right = NULL;
            }
            else{
                TreeNode* r = new TreeNode(stoi(s));
                temp->right = r;
                q.push(r);
            }
        }
        return root;
    }
};