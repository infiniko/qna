// Construct Binary Tree from Inorder and Postorder Traversal

class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, int inS, int inE, vector<int>& postorder, int postS, int postE, map<int,int> &inMap) {

        if(inS>inE || postS>postE) return NULL;

        TreeNode* root = new TreeNode(postorder[postE]);
        int inRoot = inMap[root->val];
        int len = inRoot - inS;

        root->left = buildTree(inorder, inS, inRoot-1, postorder, postS, postS+len-1, inMap);
        root->right = buildTree(inorder, inRoot+1, inE, postorder, postS+len, postE-1, inMap);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        map<int,int> inMap;
        int n = inorder.size();
        for(int i=0;i<n;i++){
            inMap[inorder[i]] = i;
        }
        return buildTree(inorder,0,n-1,postorder,0,n-1,inMap);
    }
};