// Construct Binary Tree from Preorder and Inorder Traversal

class Solution {
public:

    TreeNode* buildTree(vector<int>& preorder, int preS, int preE, vector<int>& inorder, int inS, int inE, map<int,int> &inMap){

        if(preS>preE || inS>inE) return NULL;

        TreeNode* root = new TreeNode(preorder[preS]);

        int inRoot = inMap[root->val];
        int len = inRoot - inS;

        root->left = buildTree(preorder,preS+1,preS+len,inorder,inS,inRoot-1,inMap);
        root->right = buildTree(preorder,preS+len+1,preE,inorder,inRoot+1,inE,inMap);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int,int> inMap;
        int n = inorder.size();

        for(int i=0;i<n;i++){
            inMap[inorder[i]] = i;
        }
        return buildTree(preorder,0,n-1,inorder,0,n-1,inMap);
    }
};