//  Rotting Oranges

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int fresh=0;
        queue<pair<pair<int,int>,int>> q;

        int vis[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    vis[i][j] = 2;
                    q.push({{i,j},0}); // push all rotten oranges at initial stage
                }
                else{
                    if(grid[i][j]==1) fresh++;
                    vis[i][j] = 0;
                }
            }
        }

        int converted =0;
        int minPassed = 0;

        while(!q.empty()){
            int row = q.front().first.first;
            int col = q.front().first.second;
            int time = q.front().second;
            q.pop();
            minPassed = max(minPassed,time);
            int dh[] = {0,-1,0,1};
            int dv[] = {1,0,-1,0};

            for(int i=0;i<4;i++){
                int nrow = row + dv[i];
                int ncol = col + dh[i];

                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && vis[nrow][ncol] ==0){
                    q.push({{nrow,ncol},time+1});
                    vis[nrow][ncol] = 2;
                    converted++;
                }
            }
        }

        if(converted!=fresh) return -1;
        return minPassed;
    }
};