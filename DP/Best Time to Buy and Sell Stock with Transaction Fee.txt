//Best Time to Buy and Sell Stock with Transaction Fee
//memoization
class Solution {
public:
    int profitSolver(int index, int buyP, vector<int> &prices, int n, int fee, vector<vector<int>> &dp){

        if(index==n){
            return 0;
        }
        if(dp[index][buyP]  != -1){
            return dp[index][buyP];
        }
        if(buyP){
            return dp[index][buyP] = max(-prices[index] + profitSolver(index+1,0,prices,n,fee,dp) , profitSolver(index+1,1,prices,n,fee,dp));
        }
        else{
            return dp[index][buyP] = max( prices[index] - fee + profitSolver(index+1,1,prices,n,fee,dp), profitSolver(index+1,0,prices,n,fee,dp));
        }
    }
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n,vector<int>(2,-1));
        return profitSolver(0,1,prices,n,fee,dp);
    }
};

//tabulation
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<int> ahead(2,0), curr(2,0);
        for (int index = n - 1; index >= 0; index--) {
            for (int buyP = 0; buyP <= 1; buyP++) {
                int profit = 0;
                if (buyP) {
                    profit = max(-prices[index] + ahead[0], ahead[1]);
                } else {
                    profit = max(prices[index] -fee + ahead[1], ahead[0]);
                }
                curr[buyP] = profit;
            }
            ahead = curr;
        }
        return ahead[1];
    }
};