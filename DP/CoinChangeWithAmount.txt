class Solution {
public:
    int minCoinChangeUntil(int index, int amount, vector<int>& coins, vector<vector<int>> &dp){

        if(index==0){
            if(amount%coins[0]==0)
                return amount/coins[0];
            return 1e7;
        }

        if(dp[index][amount]!=-1){
            return dp[index][amount];
        }

        int notTake = 0 + minCoinChangeUntil(index-1,amount,coins,dp);
        int take = INT_MAX;
        if(coins[index]<=amount) take = 1 + minCoinChangeUntil(index,amount-coins[index],coins,dp);

        return dp[index][amount] = min(take,notTake);

    }
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>> dp(n,vector<int>(amount+1,-1));
        int answer = minCoinChangeUntil(n-1,amount,coins,dp);
        if(answer>=1e7){
            return -1;
        }
        return answer;
    }
};