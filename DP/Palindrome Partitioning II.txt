//memorization
class Solution {
public:
    bool isPalindrome(string& s, int start, int end) {
        while (start < end) {
            if (s[start] != s[end]) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    int solver(int i, int n, string& s, vector<int>& dp) {

        if (i == n) {
            return 0;
        }

        if (dp[i] != -1) {
            return dp[i];
        }

        int minCuts = 1e9;
        for (int k = i; k < n; k++) {
            if(isPalindrome(s,i,k)){
                int cuts = 1 + solver(k+1, n, s, dp);
            minCuts = min(minCuts, cuts);
            }
        }
        return dp[i] = minCuts;
    }
    int minCut(string s) {
        int n = s.size();
        vector<int> dp(n,-1);
        return solver(0, n, s, dp) - 1;
    }
};



//tabulation
class Solution {
public:
    bool isPalindrome(string& s, int start, int end) {
        while (start < end) {
            if (s[start] != s[end]) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    int minCut(string s) {
        int n = s.size();
        vector<int> dp(n + 1, 0);
        dp[n] = 0;
        for (int i = n - 1; i >= 0; i--) {
            int minCuts = 1e9;

            for (int k = i; k < n; k++) {
                if (isPalindrome(s, i, k)) {
                    int cuts = 1 + dp[k + 1];
                    minCuts = min(minCuts, cuts);
                }
            }
            dp[i] = minCuts;
        }
        return dp[0] - 1;
    }
};