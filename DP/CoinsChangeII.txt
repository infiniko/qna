//memoization
class Solution {
public:
    int changeUntil(int index, int amount, vector<int> &coins, vector<vector<int>> &dp){

        if(index==0){
            if(amount%coins[0]==0)
                return 1;
            return 0;
        }

        if(dp[index][amount] != -1) return dp[index][amount];

        int take = 0;
        if(coins[index]<=amount) take = changeUntil(index,amount-coins[index],coins,dp);
        int notTake = changeUntil(index-1,amount,coins,dp);

        return dp[index][amount] = take+notTake;

    }
    int change(int amount, vector<int>& coins) {
        int n = coins.size();

        vector<vector<int>> dp(n, vector<int>(amount+1, -1));

        return changeUntil(n-1,amount,coins,dp);
    }
};


//tabulation
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int>(amount+1, 0));
        
        for(int a=0; a <= amount; a++){
            if(a%coins[0] == 0 )
                dp[0][a] = 1;
            else
                dp[0][a] = 0;
        }

        for(int index=1; index<n; index++){
            for(int a = 0; a<=amount; a++){
                int take = 0;
                if(coins[index]<=a) take = dp[index][a-coins[index]];
                int notTake = dp[index-1][a];

                dp[index][a] = take+notTake;
            }
        }

        return dp[n-1][amount];
    }
};