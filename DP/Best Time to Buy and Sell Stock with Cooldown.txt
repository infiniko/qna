//memoization
class Solution {
public:
    int profitFFinder(int ind, int buyP, vector<int>& prices, int n, vector<vector<int>>& dp){

        if(ind>=n){
            return 0;
        }
        if(dp[ind][buyP] != -1 ){
            return dp[ind][buyP];
        }

        if(buyP){
            return dp[ind][buyP] = max( -prices[ind] + profitFFinder(ind+1,0,prices,n,dp),
                                        0 + profitFFinder(ind+1,1,prices,n,dp));
        }
        else{
            return dp[ind][buyP] = max( prices[ind] + profitFFinder(ind+2,1,prices,n,dp),
                                        0 + profitFFinder(ind+1,0,prices,n,dp));
        }
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int>(2, -1));
        return profitFFinder(0,1,prices,n,dp);
    }
};


//tabulation
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n + 2, vector<int>(2, 0));
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buyP = 0; buyP <= 1; buyP++) {
                if (buyP) {
                    dp[ind][buyP] = max( -prices[ind] + dp[ind+1][0], dp[ind+1][1]);
                } else {
                    dp[ind][buyP] = max( prices[ind] + dp[ind+2][1], dp[ind+1][0]);
                }
            }
        }
        return dp[0][1];
    }
};