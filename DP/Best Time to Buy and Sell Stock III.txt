class Solution {
public:
    int profitSolver(int index, int buyP, int cap, vector<int> &prices, int n, vector<vector<vector<int>>> &dp){
        
        if(cap==0){
            return 0;
        }
        if(index==n){
            return 0;
        }

        if(dp[index][buyP][cap] != -1){
            return dp[index][buyP][cap];
        }

        int profit = 0;
        if(buyP){
            profit = max( -prices[index] + profitSolver(index+1,0,cap,prices,n,dp),
                            0 + profitSolver(index+1,1,cap,prices,n,dp));
        }
        else{
            profit = max( prices[index] + profitSolver(index+1,1,cap-1,prices,n,dp),
                            0 + profitSolver(index+1,0,cap,prices,n,dp));
        }

        return dp[index][buyP][cap] = profit;
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(3,-1)));
        return profitSolver(0,1,2,prices,n,dp);
    }
};


//tabulation with space optimization
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> ahead(2, vector<int>(3, 0)), curr(2, vector<int>(3, 0));
        for (int index = n - 1; index >= 0; index--) {
            for (int buyP = 0; buyP < 2; buyP++) {
                for (int cap = 1; cap <= 2; cap++) {

                    if (buyP) {
                        curr[buyP][cap] = max(-prices[index] + ahead[0][cap], ahead[1][cap]);
                    } else {
                        curr[buyP][cap] = max(prices[index] + ahead[1][cap - 1], ahead[0][cap]);
                    }
                }
            }
            ahead = curr;
        }
        return ahead[1][2];
    }
};