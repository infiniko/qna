// Best Time to Buy and Sell Stock II

class Solution {
public:
    int profitSolver(int index, int buyP, vector<int> &prices, int n, vector<vector<int>> &dp){

        if(index==n){
            return 0;
        }

        if(dp[index][buyP]  != -1){
            return dp[index][buyP];
        }

        int profit = 0;
        if(buyP){

            profit = max(-prices[index] + profitSolver(index+1,0,prices,n,dp) , 0 + profitSolver(index+1,1,prices,n,dp));
        }
        else{
            profit = max( prices[index] + profitSolver(index+1,1,prices,n,dp), 0 + profitSolver(index+1,0,prices,n,dp));
        }

        return dp[index][buyP] = profit;
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int>(2,-1));
        return profitSolver(0, 1, prices,n,dp);
    }
};


// tabulation
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n + 1, vector<int>(2, 0));

        dp[n][0] = dp[n][1] = 0;

        for (int index = n - 1; index >= 0; index--) {
            for (int buyP = 0; buyP <= 1; buyP++) {

                int profit = 0;
                if (buyP) {
                    profit = max(-prices[index] + dp[index + 1][0], dp[index + 1][1]);
                } else {
                    profit = max(prices[index] + dp[index + 1][1], dp[index + 1][0]);
                }
                dp[index][buyP] = profit;
            }
        }

        return dp[0][1];
    }
};