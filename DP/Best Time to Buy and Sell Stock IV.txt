//Best Time to Buy and Sell Stock IV

// memoization

class Solution {
public:
    int profitSolver(int index, int buyP, int cap, vector<int> &prices, int n, vector<vector<vector<int>>> &dp){

        if(index==n || cap==0){
            return 0;
        }
        if(dp[index][buyP][cap] != -1 ){
            return dp[index][buyP][cap];
        }
        int profit = 0;
        if(buyP){
            profit = max( -prices[index] + profitSolver(index+1,0,cap,prices,n,dp),
                            0 + profitSolver(index+1,1,cap,prices,n,dp));
        }
        else{
            profit = max(prices[index] + profitSolver(index+1,1,cap-1,prices,n,dp),
                            0 + profitSolver(index+1,0,cap,prices,n,dp));
        }

        return dp[index][buyP][cap] = profit;
    }
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(k+1,-1)));
        return profitSolver(0,1,k,prices,n,dp);
    }
};

//tabulation
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(k + 1, 0)));

        for (int index = n - 1; index >= 0; index--) {
            for (int buyP = 0; buyP <= 1; buyP++) {
                for (int cap = 1; cap <= k; cap++) {

                    if (buyP) {
                        dp[index][buyP][cap] = max( -prices[index] + dp[index + 1][0][cap], dp[index + 1][1][cap]);
                    } else {
                        dp[index][buyP][cap] = max( prices[index] + dp[index + 1][1][cap-1], dp[index + 1][0][cap]);
                    }
                }
            }
        }
        return dp[0][1][k];
    }
};